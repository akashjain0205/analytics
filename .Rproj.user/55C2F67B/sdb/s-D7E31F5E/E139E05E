{
    "contents" : "#' Confusion matrix and overall accuracy of predicted binary response\n#' \n#'  Takes in actual binary response, predicted probabilities and cutoff value, and \n#'  returns confusion matrix and overall accuracy\n#'  @param y actual binary response\n#'  @param yhat predicted probabilities corresponding to the actual binary response\n#'  @param cutoff threshold value in the range 0 to 1\n#'  @return a three element list: confusion matrix as a table, confusion matrix (percentages)\n#'          as a table and overall accuracy value\n#'  @author Akash Jain\n#'  @seealso \\code{\\link{ks}}, \\code{\\link{auc}}, \\code{\\link{iv}}, \\code{\\link{splitdata}}\n#'  @examples\n#'  # a data frame with y and yhat\n#' df <- data.frame(y = c(1, 0, 1, 1, 0),\n#'                  yhat = c(0.86, 0.23, 0.65, 0.92, 0.37))\n#'\n#' # Accuracy tables and overall accuracy figures \n#' ltAccuracy <- accuracy(y = df[, 'y'], yhat = df[, 'yhat'], cutoff = 0.7)\n#' accuracyNumber <- ltAccuracy$accuracyNum\n#' accuracyPercentage <- ltAccuracy$accuracyPer\n#' overallAccuracy <- ltAccuracy$overallAcc\n#'  @export\naccuracy <- function(y, yhat, cutoff) {\n  if(length(unique(y)) != 2 | (class(y) != 'integer' && class(y) != 'numeric' && class(y) != 'factor')) {\n    stop('Invalid input: y should be integer or factor vector representing a binary response')\n  } else if(class(yhat) != 'numeric' | max(yhat) > 1 | min(yhat) < 0) {\n    stop('Invalid input: yhat should be numeric vector of predicted probabilities in the range 0 to 1')\n  } else if(length(y) != length(yhat)) {\n    stop('Invalid input: vectors y and yhat should have the same length')\n  } else if(class(cutoff) != 'numeric' | length(cutoff) != 1 | cutoff > 1 | cutoff < 0) {\n    stop('Invalid input: cutoff should be a numeric value between 0 and 1')\n  } else {\n    ypred <- ifelse(yhat > cutoff, 1, 0)\n    accuracyNum <- table(y, ypred)\n    accuracyPer <- (accuracyNum/rowSums(accuracyNum)) * 100\n    overallAccuracy <- (sum(diag(accuracyNum))/sum(colSums(accuracyNum))) * 100\n    lt <- list(accuracyNum = accuracyNum,\n               accuracyPer = round(accuracyPer, digits = 2),\n               overallAcc = round(overallAccuracy, digits = 2))\n    print(paste('Overall accuracy is: ', round(overallAccuracy, digits = 2), '%', sep = ''))\n    return(lt)\n  }\n}",
    "created" : 1426535021968.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "712953559",
    "id" : "E139E05E",
    "lastKnownWriteTime" : 1426494017,
    "path" : "~/analytics/R/accuracy.R",
    "project_path" : "R/accuracy.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}